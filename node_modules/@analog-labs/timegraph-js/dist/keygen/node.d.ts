import { GeneratedApiKey, GeneratedSessionKey, keygenOptionsNode } from '../types/index';
export declare class keygen {
    private _signer;
    private _address;
    /**
     * Creates a new ```Keygen``` instance.
     * @param { IKeyringPair["sign"] } args.signer the polkadot keyring keypair interface {@link https://www.npmjs.com/package/@polkadot/kering IKeyringPair["sign"]} keypair sign type is required.
     * @param {types.string} args.address the substrate wallet address used for authentication.
     * @returns {Keygen} a new keygen instance.
     *
     * ```
     * import Keyring from "@polkadot/keyring";
     * import { cryptoWaitReady } from "@polkadot/util-crypto";
     * import { Keygen } from "analog-js/timegraph-js";
     *
     * await cryptoWaitReady();
     *
     * const keyring = new Keyring({ type: "sr25519" });
     *
     * const keyparir = keyring.add...();
     *
     * const _keygen = new Keygen({ signer: keypair.sign, address: keypair.address });
     *
     * ```
     */
    constructor({ signer, address }: keygenOptionsNode);
    /**
     * Creates a new ```GeneratedApiKey```.
     * @param {role} args.role the role for the user in timegraph i.e developer, collector, user
     * @returns {Promise<GeneratedApiKey>} a new generated api key
     */
    createApiKey(role?: string): Promise<GeneratedApiKey>;
    /**
     * Creates a new ```GeneratedSessionKey```.
     * @param {expiration} args.expiration the expiration time in ms of the session key
     * @returns {Promise<GeneratedSessionKey>} a new generated session key
     */
    createSessionkey(expiration?: number): Promise<GeneratedSessionKey>;
}
//# sourceMappingURL=node.d.ts.map