import { GeneratedApiKey, GeneratedSessionKey, keygenOptionsWeb } from '../types/index';
export declare class keygen {
    private _signer;
    private _address;
    /**
     * Creates a new ```Keygen``` instance.
     * @param {Signer["signRaw"]  } args.signer the polkadot Signer interface {@link https://www.npmjs.com/package/@polkadot/extension-dapp Signer['signRaw']} injector signer interface is required.
     * @param {types.string} args.address the substrate wallet address used for authentication.
     * @returns {Keygen} a new keygen instance.
     *
     * ```
     * import { web3FromSource, web3Enable, web3Accounts } from "@polkadot/extension-dapp";
     * import { keygen } from "@analog-labs/timegraph-js/keygen/web";
     *
     * await web3Enable();
     *
     * const accounts = await web3Accounts();
     *
     * await web3 = await web3FromSource();
     *
     * const _keygen = new keygen({ signer: web3.signer.signRaw, address: accounts[0].address });
     *
     * ```
     */
    constructor({ signer, address }: keygenOptionsWeb);
    /**
     * Creates a new ```GeneratedApiKey```.
     * @param {role} args.role the role for the user in timegraph i.e developer, collector, user
     * @returns {Promise<GeneratedApiKey>} a new generated api key
     */
    createApiKey(role?: string): Promise<GeneratedApiKey>;
    /**
     * Creates a new ```GeneratedSessionKey```.
     * @param {expiration} args.expiration the expiration time in ms of the session key
     * @returns {Promise<GeneratedSessionKey>} a new generated session key
     */
    createSessionkey(expiration?: number): Promise<GeneratedSessionKey>;
}
//# sourceMappingURL=web.d.ts.map