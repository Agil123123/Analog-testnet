"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSdk = exports.ViewGetDocument = exports.ViewSubgraphDocument = exports.ViewGlobalDocument = exports.ViewDryRunDocument = exports.ViewCreateDocument = exports.UserGetDocument = exports.UserListDocument = exports.UserCreateDocument = exports.SponsorViewDocument = exports.WithdrawTokensDocument = exports.UserFundedViewsDocument = exports.ViewFundLogDocument = exports.ViewGraphDocument = exports.ViewStatsDocument = exports.SskGraphDocument = exports.SskStatsDocument = exports.BalanceHistoryDocument = exports.UserGraphDocument = exports.UserStatsDocument = exports.TotalViewsDocument = exports.TotalContractsDocument = exports.GlobalStatsDocument = exports.DryRunListSmartContractDocument = exports.ListSmartContractDocument = exports.SmartContractGetDocument = exports.SmartContractGlobalDocument = exports.FunctionGetDocument = exports.FunctionGlobalDocument = exports.FunctionSubgraphDocument = exports.FunctionCreateDocument = exports.DataDocument = exports.ApiKeyRevokeDocument = exports.ApiKeyEnableDocument = exports.ApiKeyDisableDocument = exports.ApiKeyCertifyDocument = exports.ApiKeyListDocument = exports.AliasRemoveDocument = exports.AliasAddDocument = exports.SmartContractListFragmentFragmentDoc = exports.ApiKeyInfoFragmentDoc = exports.FunctionInfoFragmentFragmentDoc = exports.ViewInfoFragmentFragmentDoc = void 0;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
exports.ViewInfoFragmentFragmentDoc = (0, graphql_tag_1.default) `
    fragment ViewInfoFragment on ViewInfo {
  hashId
  name
  description
  identifier
  sql
  creator
  references {
    hashId
    function {
      name
      identifier
      hashId
      outputs {
        name
        value
      }
      inputs {
        value
        constant
      }
      contract {
        address
      }
    }
  }
}
    `;
exports.FunctionInfoFragmentFragmentDoc = (0, graphql_tag_1.default) `
    fragment FunctionInfoFragment on FunctionInfo {
  hashId
  creator
  name
  description
  network
  identifier
  inputs {
    value
    constant
  }
  outputs {
    value
    name
  }
  contract {
    address
    abi {
      name
      inputs {
        type
      }
      outputs {
        type
      }
    }
  }
}
    `;
exports.ApiKeyInfoFragmentDoc = (0, graphql_tag_1.default) `
    fragment ApiKeyInfo on KeyInfo {
  userId
  key
  cert
  role
  status
}
    `;
exports.SmartContractListFragmentFragmentDoc = (0, graphql_tag_1.default) `
    fragment SmartContractListFragment on ContractInfo {
  id
  address
  network
  identifier
  description
  creator
  createdAt
  abi {
    inputs {
      type
    }
    outputs {
      type
    }
  }
  functions {
    hashId
    name
  }
}
    `;
exports.AliasAddDocument = (0, graphql_tag_1.default) `
    mutation aliasAdd($hashId: String!, $name: String!) {
  alias(hash: $hashId, name: $name) {
    status
    function {
      ...FunctionInfoFragment
    }
    view {
      ...ViewInfoFragment
    }
  }
}
    ${exports.FunctionInfoFragmentFragmentDoc}
${exports.ViewInfoFragmentFragmentDoc}`;
exports.AliasRemoveDocument = (0, graphql_tag_1.default) `
    mutation aliasRemove($name: String!) {
  drop(name: $name) {
    status
    function {
      ...FunctionInfoFragment
    }
    view {
      ...ViewInfoFragment
    }
  }
}
    ${exports.FunctionInfoFragmentFragmentDoc}
${exports.ViewInfoFragmentFragmentDoc}`;
exports.ApiKeyListDocument = (0, graphql_tag_1.default) `
    query apiKeyList($key: String, $limit: Int, $before: String, $after: String) {
  keys(key: $key, limit: $limit, before: $before, after: $after) {
    ...ApiKeyInfo
  }
}
    ${exports.ApiKeyInfoFragmentDoc}`;
exports.ApiKeyCertifyDocument = (0, graphql_tag_1.default) `
    mutation apiKeyCertify($cert: String!) {
  certifyKey(cert: $cert) {
    ...ApiKeyInfo
  }
}
    ${exports.ApiKeyInfoFragmentDoc}`;
exports.ApiKeyDisableDocument = (0, graphql_tag_1.default) `
    mutation apiKeyDisable($key: String!) {
  disableKey(key: $key) {
    ...ApiKeyInfo
  }
}
    ${exports.ApiKeyInfoFragmentDoc}`;
exports.ApiKeyEnableDocument = (0, graphql_tag_1.default) `
    mutation apiKeyEnable($key: String!) {
  enableKey(key: $key) {
    ...ApiKeyInfo
  }
}
    ${exports.ApiKeyInfoFragmentDoc}`;
exports.ApiKeyRevokeDocument = (0, graphql_tag_1.default) `
    mutation apiKeyRevoke($key: String!) {
  revokeKey(key: $key) {
    ...ApiKeyInfo
  }
}
    ${exports.ApiKeyInfoFragmentDoc}`;
exports.DataDocument = (0, graphql_tag_1.default) `
    query data($identifier: String!, $limit: Int, $before: Int, $after: Int) {
  global {
    query(view: $identifier, limit: $limit, before: $before, after: $after) {
      header
      data
    }
  }
}
    `;
exports.FunctionCreateDocument = (0, graphql_tag_1.default) `
    mutation functionCreate($function: [FunctionSpec!]) {
  merge(functions: $function) {
    status
    functions {
      status
      error
      name
      function {
        ...FunctionInfoFragment
      }
    }
  }
}
    ${exports.FunctionInfoFragmentFragmentDoc}`;
exports.FunctionSubgraphDocument = (0, graphql_tag_1.default) `
    query functionSubgraph($hash: String, $limit: Int, $before: String, $after: String) {
  subgraph {
    functions(hash: $hash, limit: $limit, before: $before, after: $after) {
      ...FunctionInfoFragment
    }
  }
}
    ${exports.FunctionInfoFragmentFragmentDoc}`;
exports.FunctionGlobalDocument = (0, graphql_tag_1.default) `
    query functionGlobal($hash: String, $limit: Int, $before: String, $after: String) {
  global {
    functions(hash: $hash, limit: $limit, before: $before, after: $after) {
      ...FunctionInfoFragment
    }
  }
}
    ${exports.FunctionInfoFragmentFragmentDoc}`;
exports.FunctionGetDocument = (0, graphql_tag_1.default) `
    query functionGet($hash: String) {
  global {
    functions(hash: $hash, limit: 1) {
      ...FunctionInfoFragment
    }
  }
}
    ${exports.FunctionInfoFragmentFragmentDoc}`;
exports.SmartContractGlobalDocument = (0, graphql_tag_1.default) `
    query smartContractGlobal($address: String, $after: Int, $before: Int, $network: String, $limit: Int) {
  global {
    contracts(
      address: $address
      after: $after
      before: $before
      network: $network
      limit: $limit
    ) {
      ...SmartContractListFragment
    }
  }
}
    ${exports.SmartContractListFragmentFragmentDoc}`;
exports.SmartContractGetDocument = (0, graphql_tag_1.default) `
    query smartContractGet($address: String!) {
  global {
    contracts(address: $address, limit: 1) {
      address
      functions {
        hashId
        creator
        name
        description
        network
        identifier
        inputs {
          value
          constant
        }
        outputs {
          value
          name
        }
        contract {
          address
          abi {
            name
            inputs {
              type
            }
            outputs {
              type
            }
          }
        }
      }
    }
  }
}
    `;
exports.ListSmartContractDocument = (0, graphql_tag_1.default) `
    mutation listSmartContract($address: String!, $network: String!, $identifier: String!, $chain: String, $abi: String, $methods: [String!], $scope: String) {
  contract(
    address: $address
    network: $network
    identifier: $identifier
    chain: $chain
    methods: $methods
    abi: $abi
    scope: $scope
    dryRun: false
  ) {
    status
    error
    contract {
      status
      error
      address
      network
      identifier
    }
    functions {
      status
      error
      name
      function {
        hashId
        network
        name
        identifier
        description
        outputs {
          name
          value
        }
        inputs {
          constant
          value
        }
      }
    }
  }
}
    `;
exports.DryRunListSmartContractDocument = (0, graphql_tag_1.default) `
    mutation dryRunListSmartContract($address: String!, $network: String!, $identifier: String!, $chain: String, $abi: String) {
  contract(
    address: $address
    network: $network
    identifier: $identifier
    chain: $chain
    abi: $abi
    dryRun: true
  ) {
    status
    error
    contract {
      error
      status
      address
      network
      identifier
    }
    functions {
      status
      error
      name
      function {
        hashId
        network
        name
        identifier
        description
        outputs {
          name
          value
        }
        inputs {
          constant
          value
        }
      }
    }
  }
}
    `;
exports.GlobalStatsDocument = (0, graphql_tag_1.default) `
    query GlobalStats {
  global {
    networkCount
    contractCount
    functionCount
    viewCount
    totalQuery
    totalQueryFee
    fundLocked
    fundLockedInView
  }
}
    `;
exports.TotalContractsDocument = (0, graphql_tag_1.default) `
    query TotalContracts {
  global {
    contractCount
  }
}
    `;
exports.TotalViewsDocument = (0, graphql_tag_1.default) `
    query TotalViews {
  global {
    viewCount
  }
}
    `;
exports.UserStatsDocument = (0, graphql_tag_1.default) `
    query UserStats($userId: Int!) {
  global {
    totalUserQuery(userId: $userId)
    totalUserQueryFee(userId: $userId)
    rewardPerDataCollector(userId: $userId)
    totalUserSponsor(userId: $userId)
    totalUserRewards(userId: $userId)
  }
}
    `;
exports.UserGraphDocument = (0, graphql_tag_1.default) `
    query UserGraph($userId: Int!, $isWeek: Boolean!, $isMonth: Boolean!, $isAllTime: Boolean!) {
  global {
    totalUserQueryLastWeek(userId: $userId) @include(if: $isWeek) {
      date
      count
    }
    totalUserQueryLastMonth(userId: $userId) @include(if: $isMonth) {
      date
      count
    }
    totalUserQueryAllTime(userId: $userId) @include(if: $isAllTime) {
      date
      count
    }
  }
}
    `;
exports.BalanceHistoryDocument = (0, graphql_tag_1.default) `
    query BalanceHistory($userId: Int!) {
  global {
    balanceHistory(userId: $userId) {
      changeType
      timestamp
      amount
    }
  }
}
    `;
exports.SskStatsDocument = (0, graphql_tag_1.default) `
    query SSKStats($ssk: String!) {
  global {
    totalSskQuery(ssk: $ssk)
    totalSskQueryFee(ssk: $ssk)
  }
}
    `;
exports.SskGraphDocument = (0, graphql_tag_1.default) `
    query SSKGraph($ssk: String!, $isWeek: Boolean!, $isMonth: Boolean!, $isAllTime: Boolean!) {
  global {
    totalSskQueryLastWeek(ssk: $ssk) @include(if: $isWeek) {
      date
      count
    }
    totalSskQueryLastMonth(ssk: $ssk) @include(if: $isMonth) {
      date
      count
    }
    totalSskQueryAllTime(ssk: $ssk) @include(if: $isAllTime) {
      date
      count
    }
  }
}
    `;
exports.ViewStatsDocument = (0, graphql_tag_1.default) `
    query ViewStats($viewName: String!) {
  global {
    totalQueryPerView(viewName: $viewName)
    uniqueUserQueryPerView(viewName: $viewName)
    rewardPerView(viewName: $viewName)
    fundLockedInView(viewName: $viewName)
    minimumSponsor(viewName: $viewName) {
      cycles
      amount
    }
    viewIndexingStatus(viewName: $viewName) {
      status
      leftClocks
    }
  }
}
    `;
exports.ViewGraphDocument = (0, graphql_tag_1.default) `
    query ViewGraph($viewName: String!, $isWeek: Boolean!, $isMonth: Boolean!, $isAllTime: Boolean!) {
  global {
    totalQueryPerViewLastWeek(viewName: $viewName) @include(if: $isWeek) {
      date
      count
    }
    totalQueryPerViewLastMonth(viewName: $viewName) @include(if: $isMonth) {
      date
      count
    }
    totalQueryPerViewAllTime(viewName: $viewName) @include(if: $isAllTime) {
      date
      count
    }
    uniqueUserQueryPerViewLastWeek(viewName: $viewName) @include(if: $isWeek) {
      date
      count
    }
    uniqueUserQueryPerViewLastMonth(viewName: $viewName) @include(if: $isMonth) {
      date
      count
    }
    uniqueUserQueryPerViewAllTime(viewName: $viewName) @include(if: $isAllTime) {
      date
      count
    }
    rewardPerViewLastWeek(viewName: $viewName) @include(if: $isWeek) {
      date
      balance
    }
  }
}
    `;
exports.ViewFundLogDocument = (0, graphql_tag_1.default) `
    query ViewFundLog($viewName: String!) {
  global {
    viewFundLog(viewName: $viewName) {
      view
      sponsor
      status
      timestamp
      amount
    }
  }
}
    `;
exports.UserFundedViewsDocument = (0, graphql_tag_1.default) `
    query UserFundedViews($userId: Int!) {
  global {
    fundedViewLog(userId: $userId) {
      name
      hash
      funded
      fundedAt
      wallet
    }
  }
}
    `;
exports.WithdrawTokensDocument = (0, graphql_tag_1.default) `
    mutation withdrawTokens($amount: String!) {
  withdrawToken(amount: $amount) {
    status
    error
    amount
  }
}
    `;
exports.SponsorViewDocument = (0, graphql_tag_1.default) `
    mutation sponsorView($viewName: String!, $amount: String!) {
  sponsorView(viewName: $viewName, amount: $amount) {
    status
    error
    amount
  }
}
    `;
exports.UserCreateDocument = (0, graphql_tag_1.default) `
    mutation userCreate($address: String!) {
  createAccount(wallet: $address) {
    userId
    wallet
    userRole
    subgraph
    balance
  }
}
    `;
exports.UserListDocument = (0, graphql_tag_1.default) `
    query userList($limit: Int, $before: Int, $after: Int) {
  users(limit: $limit, before: $before, after: $after) {
    userId
    wallet
    userRole
    subgraph
    balance
  }
}
    `;
exports.UserGetDocument = (0, graphql_tag_1.default) `
    query userGet {
  userInfo {
    userId
    wallet
    userRole
    subgraph
    balance
  }
}
    `;
exports.ViewCreateDocument = (0, graphql_tag_1.default) `
    mutation viewCreate($view: [ViewSpec!]) {
  merge(views: $view) {
    status
    views {
      status
      error
      name
      view {
        ...ViewInfoFragment
      }
    }
  }
}
    ${exports.ViewInfoFragmentFragmentDoc}`;
exports.ViewDryRunDocument = (0, graphql_tag_1.default) `
    mutation viewDryRun($view: [ViewSpec!]) {
  merge(views: $view, dryRun: true) {
    status
    views {
      status
      error
      name
      data
      header
      view {
        name
        identifier
        hashId
        dryRun {
          errors {
            at
            clock
            error
          }
          updates {
            at
            clock
            error
          }
        }
      }
    }
  }
}
    `;
exports.ViewGlobalDocument = (0, graphql_tag_1.default) `
    query viewGlobal($after: String, $before: String, $hash: String, $limit: Int) {
  global {
    count {
      views
    }
    views(after: $after, before: $before, hash: $hash, limit: $limit) {
      ...ViewInfoFragment
    }
  }
}
    ${exports.ViewInfoFragmentFragmentDoc}`;
exports.ViewSubgraphDocument = (0, graphql_tag_1.default) `
    query viewSubgraph($after: String, $before: String, $hash: String, $limit: Int) {
  subgraph {
    count {
      views
    }
    views(after: $after, before: $before, hash: $hash, limit: $limit) {
      ...ViewInfoFragment
    }
  }
}
    ${exports.ViewInfoFragmentFragmentDoc}`;
exports.ViewGetDocument = (0, graphql_tag_1.default) `
    query viewGet($hashId: String!) {
  global {
    views(hash: $hashId, limit: 1) {
      ...ViewInfoFragment
    }
  }
}
    ${exports.ViewInfoFragmentFragmentDoc}`;
const defaultWrapper = (action, _operationName, _operationType) => action();
function getSdk(client, withWrapper = defaultWrapper) {
    return {
        aliasAdd(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.AliasAddDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'aliasAdd', 'mutation');
        },
        aliasRemove(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.AliasRemoveDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'aliasRemove', 'mutation');
        },
        apiKeyList(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ApiKeyListDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'apiKeyList', 'query');
        },
        apiKeyCertify(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ApiKeyCertifyDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'apiKeyCertify', 'mutation');
        },
        apiKeyDisable(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ApiKeyDisableDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'apiKeyDisable', 'mutation');
        },
        apiKeyEnable(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ApiKeyEnableDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'apiKeyEnable', 'mutation');
        },
        apiKeyRevoke(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ApiKeyRevokeDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'apiKeyRevoke', 'mutation');
        },
        data(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.DataDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'data', 'query');
        },
        functionCreate(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.FunctionCreateDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'functionCreate', 'mutation');
        },
        functionSubgraph(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.FunctionSubgraphDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'functionSubgraph', 'query');
        },
        functionGlobal(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.FunctionGlobalDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'functionGlobal', 'query');
        },
        functionGet(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.FunctionGetDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'functionGet', 'query');
        },
        smartContractGlobal(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.SmartContractGlobalDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'smartContractGlobal', 'query');
        },
        smartContractGet(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.SmartContractGetDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'smartContractGet', 'query');
        },
        listSmartContract(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ListSmartContractDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'listSmartContract', 'mutation');
        },
        dryRunListSmartContract(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.DryRunListSmartContractDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'dryRunListSmartContract', 'mutation');
        },
        GlobalStats(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GlobalStatsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GlobalStats', 'query');
        },
        TotalContracts(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.TotalContractsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'TotalContracts', 'query');
        },
        TotalViews(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.TotalViewsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'TotalViews', 'query');
        },
        UserStats(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.UserStatsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'UserStats', 'query');
        },
        UserGraph(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.UserGraphDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'UserGraph', 'query');
        },
        BalanceHistory(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.BalanceHistoryDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'BalanceHistory', 'query');
        },
        SSKStats(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.SskStatsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'SSKStats', 'query');
        },
        SSKGraph(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.SskGraphDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'SSKGraph', 'query');
        },
        ViewStats(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ViewStatsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ViewStats', 'query');
        },
        ViewGraph(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ViewGraphDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ViewGraph', 'query');
        },
        ViewFundLog(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ViewFundLogDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ViewFundLog', 'query');
        },
        UserFundedViews(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.UserFundedViewsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'UserFundedViews', 'query');
        },
        withdrawTokens(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.WithdrawTokensDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'withdrawTokens', 'mutation');
        },
        sponsorView(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.SponsorViewDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'sponsorView', 'mutation');
        },
        userCreate(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.UserCreateDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'userCreate', 'mutation');
        },
        userList(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.UserListDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'userList', 'query');
        },
        userGet(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.UserGetDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'userGet', 'query');
        },
        viewCreate(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ViewCreateDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'viewCreate', 'mutation');
        },
        viewDryRun(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ViewDryRunDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'viewDryRun', 'mutation');
        },
        viewGlobal(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ViewGlobalDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'viewGlobal', 'query');
        },
        viewSubgraph(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ViewSubgraphDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'viewSubgraph', 'query');
        },
        viewGet(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ViewGetDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'viewGet', 'query');
        }
    };
}
exports.getSdk = getSdk;
