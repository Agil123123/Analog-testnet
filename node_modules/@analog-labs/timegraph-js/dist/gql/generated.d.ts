import { GraphQLClient } from 'graphql-request';
import { GraphQLClientRequestHeaders } from 'graphql-request/build/cjs/types';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<T extends {
    [key: string]: unknown;
}, K extends keyof T> = {
    [_ in K]?: never;
};
export type Incremental<T> = T | {
    [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: {
        input: string;
        output: string;
    };
    String: {
        input: string;
        output: string;
    };
    Boolean: {
        input: boolean;
        output: boolean;
    };
    Int: {
        input: number;
        output: number;
    };
    Float: {
        input: number;
        output: number;
    };
};
/** User information */
export type Account = {
    __typename?: 'Account';
    /** The user Id */
    id: Scalars['Int']['output'];
    /** The user wallet */
    wallet: Scalars['String']['output'];
};
export type AliasResult = {
    __typename?: 'AliasResult';
    error?: Maybe<Scalars['String']['output']>;
    function?: Maybe<FunctionInfo>;
    status: Scalars['String']['output'];
    view?: Maybe<ViewInfo>;
};
export type BalanceHistory = {
    __typename?: 'BalanceHistory';
    amount: Scalars['String']['output'];
    changeType: Scalars['String']['output'];
    timestamp: Scalars['String']['output'];
};
export type BalanceWithDay = {
    __typename?: 'BalanceWithDay';
    balance: Scalars['String']['output'];
    date: Scalars['String']['output'];
};
/** Collections in the current subgraph */
export type Collection = {
    __typename?: 'Collection';
    _count: Scalars['Int']['output'];
};
/** Contract Input/Output information */
export type ContractInOutInfo = {
    __typename?: 'ContractInOutInfo';
    /** Data type */
    type: Scalars['String']['output'];
};
/** Contract Input/Output specification */
export type ContractInOutSpec = {
    /** Data type */
    type: Scalars['String']['input'];
};
/** Smart contract as a group of function */
export type ContractInfo = {
    __typename?: 'ContractInfo';
    /** Composed ABI from all functions grouped in the smart contract */
    abi: Array<FunctionContractAbiInfo>;
    /** The smart contract address */
    address: Scalars['String']['output'];
    /** The time when the smart contract group was created */
    createdAt: Scalars['String']['output'];
    /** The wallet created the contract */
    creator: Scalars['String']['output'];
    /** The smart contract description */
    description?: Maybe<Scalars['String']['output']>;
    /** Feeds associated with the smart contract */
    feeds: Array<FeedInfo>;
    /** Functions associated with the smart contract */
    functions: Array<FunctionInfo>;
    /** Unique Identifier */
    id: Scalars['Int']['output'];
    /** The smart contract global identifier */
    identifier?: Maybe<Scalars['String']['output']>;
    /** The smart contract network */
    network: Scalars['String']['output'];
    /** Views associated with the smart contract */
    views: Array<ViewInfo>;
};
export type ContractMutationResult = {
    __typename?: 'ContractMutationResult';
    /** proposed or merged contract */
    contract: ContractResult;
    /** error text if status is "Failed" */
    error?: Maybe<Scalars['String']['output']>;
    /** proposed or merged functions */
    functions: Array<FunctionResult>;
    /** mutation result - can be "Completed" or "Failed" */
    status: Scalars['String']['output'];
};
export type ContractResult = {
    __typename?: 'ContractResult';
    /** contract address */
    address: Scalars['String']['output'];
    /** error text if status is "Failed" */
    error?: Maybe<Scalars['String']['output']>;
    /** unique identifier */
    identifier?: Maybe<Scalars['String']['output']>;
    /** contract network */
    network: Scalars['String']['output'];
    /** contract mutation result - can be "Failed", "Created", "Untouched" */
    status: Scalars['String']['output'];
};
/** Count of objects */
export type Count = {
    __typename?: 'Count';
    /** Count of collections */
    collections: Scalars['Int']['output'];
    /** Count of functions */
    functions: Scalars['Int']['output'];
    /** Count of views */
    views: Scalars['Int']['output'];
};
export type CountWithDay = {
    __typename?: 'CountWithDay';
    count: Scalars['Int']['output'];
    date: Scalars['String']['output'];
};
/** Reference to bounded function used by view */
export type FeedInfo = {
    __typename?: 'FeedInfo';
    args?: Maybe<Array<Scalars['String']['output']>>;
    function?: Maybe<FunctionInfo>;
    hashId: Scalars['String']['output'];
    view?: Maybe<ViewInfo>;
};
/** Contract ABI information */
export type FunctionContractAbiInfo = {
    __typename?: 'FunctionContractAbiInfo';
    /** Input information */
    inputs: Array<ContractInOutInfo>;
    /** ABI entrypoint name */
    name: Scalars['String']['output'];
    /** Output information */
    outputs: Array<ContractInOutInfo>;
};
/** Contract ABI specification (nonpyable function which does not change the state) */
export type FunctionContractAbiSpec = {
    /** Input specification */
    inputs: Array<ContractInOutSpec>;
    /** ABI entrypoint name */
    name: Scalars['String']['input'];
    /** Output specification */
    outputs: Array<ContractInOutSpec>;
};
/** Contract information */
export type FunctionContractInfo = {
    __typename?: 'FunctionContractInfo';
    /** Contract ABI */
    abi: FunctionContractAbiInfo;
    /** Contract address */
    address: Scalars['String']['output'];
};
/** Contract specification */
export type FunctionContractSpec = {
    /** Contract ABI */
    abi: FunctionContractAbiSpec;
    /** Contract address */
    address: Scalars['String']['input'];
};
/** Function information */
export type FunctionInfo = {
    __typename?: 'FunctionInfo';
    /** Contract information */
    contract?: Maybe<FunctionContractInfo>;
    /** Wallet created the function */
    creator: Scalars['String']['output'];
    /** Description */
    description?: Maybe<Scalars['String']['output']>;
    /** Object hash id */
    hashId: Scalars['String']['output'];
    /** Global unique identifier */
    identifier: Scalars['String']['output'];
    /** Function inputs */
    inputs: Array<FunctionInputInfo>;
    /** Local name in the current subgraph */
    name?: Maybe<Scalars['String']['output']>;
    /** Target network */
    network: Scalars['String']['output'];
    /** Function outputs */
    outputs: Array<FunctionOutputInfo>;
};
/** Function input information */
export type FunctionInputInfo = {
    __typename?: 'FunctionInputInfo';
    /** Nested array */
    array?: Maybe<Array<FunctionInputInfo>>;
    /** Predefined constant is used as argument */
    constant?: Maybe<Scalars['String']['output']>;
    /** Type conversion */
    value?: Maybe<Scalars['String']['output']>;
};
/** Function input specification ( either input or constant or array ) */
export type FunctionInputSpec = {
    /** Nested array */
    array?: InputMaybe<Array<FunctionInputSpec>>;
    /** Predefined constant is used as argument */
    constant?: InputMaybe<Scalars['String']['input']>;
    /** Type conversion */
    value?: InputMaybe<Scalars['String']['input']>;
};
/** Function output information */
export type FunctionOutputInfo = {
    __typename?: 'FunctionOutputInfo';
    /** Nested array */
    array?: Maybe<Array<FunctionOutputInfo>>;
    /** Name to store in database */
    name?: Maybe<Scalars['String']['output']>;
    /**
     * Possible values:
     * numeric
     * string
     * integer
     * boolean
     * skip (skip value in result)
     * None (if array field isn't None)
     */
    value?: Maybe<Scalars['String']['output']>;
};
/** Function output specification (either output or array) */
export type FunctionOutputSpec = {
    /** Nested array */
    array?: InputMaybe<Array<FunctionOutputSpec>>;
    /** Name to store in database */
    name?: InputMaybe<Scalars['String']['input']>;
    /**
     * Type to store in the database
     * numeric
     * string
     * integer
     * boolean
     * data (use default from the ABI)
     * skip  (skip value in results)
     * None (if the array field isn't None)
     */
    value?: InputMaybe<Scalars['String']['input']>;
};
export type FunctionResult = {
    __typename?: 'FunctionResult';
    /** Error message if error happens */
    error?: Maybe<Scalars['String']['output']>;
    /** The wallet created the function */
    function?: Maybe<FunctionInfo>;
    /** Requested function name */
    name?: Maybe<Scalars['String']['output']>;
    /**
     * Merging status
     * can be Merged, Unchanged, Error
     */
    status: Scalars['String']['output'];
};
/** Function specification */
export type FunctionSpec = {
    /** Contract information */
    contract?: InputMaybe<FunctionContractSpec>;
    /** Function unique global name */
    identifier?: InputMaybe<Scalars['String']['input']>;
    /** Function inputs */
    inputs: Array<FunctionInputSpec>;
    /** Local name in the current subgraph */
    name: Scalars['String']['input'];
    /** Target network */
    network: Scalars['String']['input'];
    /** Function outputs */
    outputs: Array<FunctionOutputSpec>;
};
export type FundedView = {
    __typename?: 'FundedView';
    funded: Scalars['String']['output'];
    fundedAt: Scalars['String']['output'];
    hash: Scalars['String']['output'];
    name: Scalars['String']['output'];
    wallet: Scalars['String']['output'];
};
/** Global objects view */
export type Global = {
    __typename?: 'Global';
    balanceHistory: Array<BalanceHistory>;
    contractCount: Scalars['Int']['output'];
    contracts: Array<ContractInfo>;
    /** Count of accessible collections, functions, and views */
    count: Count;
    /**
     * List accessible feeds
     * @hash: the hash of the collection to list only one
     * @limit: max count of collections to list
     * @before: the hash to list collections before it
     * @after: the hash to list collections after it
     */
    feeds: Array<FeedInfo>;
    functionCount: Scalars['Int']['output'];
    /**
     * List accessible functions
     * @hash: the hash of the function to list only one
     * @limit: max count of functions to list
     * @before: the hash to list functions before it
     * @after: the hash to list functions after it
     */
    functions: Array<FunctionInfo>;
    fundLocked: Scalars['String']['output'];
    fundLockedInView: Scalars['String']['output'];
    fundedViewList: Array<Scalars['String']['output']>;
    fundedViewLog: Array<FundedView>;
    minimumSponsor: MinimumSponsor;
    networkCount: Scalars['Int']['output'];
    query: QueryResult;
    rewardPerDataCollector: Scalars['String']['output'];
    rewardPerView: Scalars['String']['output'];
    rewardPerViewLastWeek: Array<BalanceWithDay>;
    /**
     * List accessible subgraphs
     * @id: id of the subgraph to list only one
     * @limit: count of subgraphs to list"
     * @before: the subgraph id to list before it
     * @after: the subgraph id to list after it"
     * @user: user id to list only subgraphs created by the user
     */
    subgraphs: Array<SubgraphInfo>;
    totalQuery: Scalars['Int']['output'];
    totalQueryFee: Scalars['String']['output'];
    totalQueryPerView: Scalars['Int']['output'];
    totalQueryPerViewAllTime: Array<CountWithDay>;
    totalQueryPerViewLastMonth: Array<CountWithDay>;
    totalQueryPerViewLastWeek: Array<CountWithDay>;
    totalSskQuery: Scalars['Int']['output'];
    totalSskQueryAllTime: Array<CountWithDay>;
    totalSskQueryFee: Scalars['String']['output'];
    totalSskQueryLastMonth: Array<CountWithDay>;
    totalSskQueryLastWeek: Array<CountWithDay>;
    totalTaskSpentPerUser: Scalars['String']['output'];
    totalUserQuery: Scalars['Int']['output'];
    totalUserQueryAllTime: Array<CountWithDay>;
    totalUserQueryFee: Scalars['String']['output'];
    totalUserQueryLastMonth: Array<CountWithDay>;
    totalUserQueryLastWeek: Array<CountWithDay>;
    totalUserRewards: Scalars['String']['output'];
    totalUserRewardsPerView: Scalars['String']['output'];
    totalUserSponsor: Scalars['String']['output'];
    uniqueUserQueryPerView: Scalars['Int']['output'];
    uniqueUserQueryPerViewAllTime: Array<CountWithDay>;
    uniqueUserQueryPerViewLastMonth: Array<CountWithDay>;
    uniqueUserQueryPerViewLastWeek: Array<CountWithDay>;
    viewCount: Scalars['Int']['output'];
    viewFundLog: Array<ViewFundingLog>;
    viewIndexingStatus: ViewIndexingStatue;
    /**
     * List accessible views
     * @hash: the hash of the view to list only one
     * @limit: max count of views to list
     * @before: the hash to list views before it
     * @after: the hash to list views after it
     */
    views: Array<ViewInfo>;
};
/** Global objects view */
export type GlobalBalanceHistoryArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalContractsArgs = {
    address?: InputMaybe<Scalars['String']['input']>;
    after?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['Int']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
    network?: InputMaybe<Scalars['String']['input']>;
};
/** Global objects view */
export type GlobalFeedsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    hash?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
};
/** Global objects view */
export type GlobalFunctionsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    hash?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
};
/** Global objects view */
export type GlobalFundLockedInViewArgs = {
    viewName?: InputMaybe<Scalars['String']['input']>;
};
/** Global objects view */
export type GlobalFundedViewListArgs = {
    limit?: InputMaybe<Scalars['Int']['input']>;
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalFundedViewLogArgs = {
    limit?: InputMaybe<Scalars['Int']['input']>;
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalMinimumSponsorArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalQueryArgs = {
    after?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['Int']['input']>;
    incomplete?: InputMaybe<Scalars['Boolean']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
    order?: InputMaybe<Scalars['String']['input']>;
    view: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalRewardPerDataCollectorArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalRewardPerViewArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalRewardPerViewLastWeekArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalSubgraphsArgs = {
    after?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['Int']['input']>;
    id?: InputMaybe<Scalars['Int']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
    user?: InputMaybe<Scalars['Int']['input']>;
};
/** Global objects view */
export type GlobalTotalQueryPerViewArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalQueryPerViewAllTimeArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalQueryPerViewLastMonthArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalQueryPerViewLastWeekArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalSskQueryArgs = {
    ssk: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalSskQueryAllTimeArgs = {
    ssk: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalSskQueryFeeArgs = {
    ssk: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalSskQueryLastMonthArgs = {
    ssk: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalSskQueryLastWeekArgs = {
    ssk: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalTaskSpentPerUserArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalTotalUserQueryArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalTotalUserQueryAllTimeArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalTotalUserQueryFeeArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalTotalUserQueryLastMonthArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalTotalUserQueryLastWeekArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalTotalUserRewardsArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalTotalUserRewardsPerViewArgs = {
    userId: Scalars['Int']['input'];
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalTotalUserSponsorArgs = {
    userId: Scalars['Int']['input'];
};
/** Global objects view */
export type GlobalUniqueUserQueryPerViewArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalUniqueUserQueryPerViewAllTimeArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalUniqueUserQueryPerViewLastMonthArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalUniqueUserQueryPerViewLastWeekArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalViewFundLogArgs = {
    limit?: InputMaybe<Scalars['Int']['input']>;
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalViewIndexingStatusArgs = {
    viewName: Scalars['String']['input'];
};
/** Global objects view */
export type GlobalViewsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    hash?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
};
/** User API key information */
export type KeyInfo = {
    __typename?: 'KeyInfo';
    /** Key certificate */
    cert: Array<Scalars['Int']['output']>;
    /** Public key */
    key: Scalars['String']['output'];
    /** Key role */
    role: Scalars['String']['output'];
    /** Status (enabled/disabled/revoked) */
    status: Scalars['String']['output'];
    /** User id */
    userId: Scalars['Int']['output'];
};
export type MergeResult = {
    __typename?: 'MergeResult';
    functions: Array<FunctionResult>;
    status: Scalars['String']['output'];
    views: Array<ViewResult>;
};
export type MinimumSponsor = {
    __typename?: 'MinimumSponsor';
    amount: Scalars['String']['output'];
    cycles: Scalars['Int']['output'];
};
export type Mutation = {
    __typename?: 'Mutation';
    alias: AliasResult;
    /**
     * Add the ApiKey certification
     * @cert: the APIKEY certificate
     * !user must be authenticated with as the key owner
     */
    certifyKey: KeyInfo;
    /**
     * Automerge deployed smart contract
     * @address - extract contract with specified address
     * @network - extract contract from specified network
     * @chain - look into specified network chain instead of mainnet
     * @identifier - propose identifier for the smart contract functions group
     * @methods - look for specified methods only
     * @abi - use the specified contract abi instead of getting the network version
     * @scope - merging scope: "global" or "subgraph"
     * @dry_run - do not merge, just propose mutations
     * @all - report all functions, it reports only view functions by default
     */
    contract: ContractMutationResult;
    /**
     * Create new account
     * @wallet: Public key of the user wallet or Substrate wallet address
     * !user must be authenticated with as the wallet owner
     */
    createAccount: UserInfo;
    /**
     * Enable temporally disabled APIkey
     * @key: the public key of the APIKEY
     * !user must be authenticated with as the key owner
     */
    disableKey: KeyInfo;
    drop: AliasResult;
    /**
     * Disable APIkey temporally
     * @key: the public key of the APIKEY
     * !user must be authenticated with as the key owner
     */
    enableKey: KeyInfo;
    hide: AliasResult;
    /**
     * Merge object specifications
     * @functions: function specifications
     * @collections: collection specifications
     * @views: view specifications
     */
    merge: MergeResult;
    /**
     * Permanently revoke APIkey
     * @key: the public key of the APIKEY
     * !user must be authenticated with as the key owner
     */
    revokeKey: KeyInfo;
    sponsorView: SponsorshipResult;
    withdrawToken: WithdrawResult;
};
export type MutationAliasArgs = {
    hash: Scalars['String']['input'];
    name: Scalars['String']['input'];
};
export type MutationCertifyKeyArgs = {
    cert: Scalars['String']['input'];
};
export type MutationContractArgs = {
    abi?: InputMaybe<Scalars['String']['input']>;
    address: Scalars['String']['input'];
    all?: InputMaybe<Scalars['Boolean']['input']>;
    chain?: InputMaybe<Scalars['String']['input']>;
    dryRun?: InputMaybe<Scalars['Boolean']['input']>;
    identifier: Scalars['String']['input'];
    methods?: InputMaybe<Array<Scalars['String']['input']>>;
    network: Scalars['String']['input'];
    scope?: InputMaybe<Scalars['String']['input']>;
};
export type MutationCreateAccountArgs = {
    wallet: Scalars['String']['input'];
};
export type MutationDisableKeyArgs = {
    key: Scalars['String']['input'];
};
export type MutationDropArgs = {
    name: Scalars['String']['input'];
};
export type MutationEnableKeyArgs = {
    key: Scalars['String']['input'];
};
export type MutationHideArgs = {
    name: Scalars['String']['input'];
};
export type MutationMergeArgs = {
    dryRun?: InputMaybe<Scalars['Boolean']['input']>;
    functions?: InputMaybe<Array<FunctionSpec>>;
    scope?: InputMaybe<Scalars['String']['input']>;
    views?: InputMaybe<Array<ViewSpec>>;
};
export type MutationRevokeKeyArgs = {
    key: Scalars['String']['input'];
};
export type MutationSponsorViewArgs = {
    amount: Scalars['String']['input'];
    viewName: Scalars['String']['input'];
};
export type MutationWithdrawTokenArgs = {
    amount: Scalars['String']['input'];
};
/** Query (readonly operations) */
export type Query = {
    __typename?: 'Query';
    /**
     * Binary representation of the collection spec
     * @hash: the collection hash to get bytes
     */
    bytes: Array<Scalars['Int']['output']>;
    /** Current subgraph collections */
    collection: Collection;
    gitHash: Scalars['String']['output'];
    /** Global view */
    global: Global;
    /**
     * API keys information
     * @key: the key to list only one
     * @limit: max count of keys to list
     * @before: the key to list keys before it
     * @after: the key to list keys after it
     */
    keys: Array<KeyInfo>;
    /** Interface revision */
    revision: Scalars['String']['output'];
    /**
     * Subgraph view
     * @id: optional subgraph id
     */
    subgraph: Subgraph;
    telemetry?: Maybe<Telemetry>;
    /** Current user info */
    userInfo: UserInfo;
    /**
     * List of users
     * @limit: max count of users to list
     * @before: the user id to list users before it
     * @after: the user id to list users after it
     */
    users: Array<UserInfo>;
};
/** Query (readonly operations) */
export type QueryBytesArgs = {
    hash: Scalars['String']['input'];
};
/** Query (readonly operations) */
export type QueryKeysArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    key?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
};
/** Query (readonly operations) */
export type QuerySubgraphArgs = {
    id?: InputMaybe<Scalars['Int']['input']>;
};
/** Query (readonly operations) */
export type QueryUsersArgs = {
    after?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['Int']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
};
export type QueryResult = {
    __typename?: 'QueryResult';
    data: Array<Array<Maybe<Scalars['String']['output']>>>;
    header: Array<Scalars['String']['output']>;
    schema: Array<Scalars['String']['output']>;
};
export type SponsorshipResult = {
    __typename?: 'SponsorshipResult';
    amount?: Maybe<Scalars['String']['output']>;
    error?: Maybe<Scalars['String']['output']>;
    status: Scalars['String']['output'];
    view?: Maybe<ViewInfo>;
};
/** User subgraph referencing objects like collections, functions and views */
export type Subgraph = {
    __typename?: 'Subgraph';
    /** Current subgraph collections */
    collection: Collection;
    /** Count of collections, functions, views in the subgraph */
    count: Count;
    /**
     * List functions in the subgraph
     * @name: the function name in the subgraph to list only one
     * @hash: the hash of the function to list only one
     * @limit: max count of functions to list
     * @before: hash to list functions before it
     * @after: hash to list functions after it
     */
    functions: Array<FunctionInfo>;
    id: Scalars['Int']['output'];
    info: SubgraphInfo;
    /**
     * List views in the subgraph
     * @name: the view name in the subgraph to list only one
     * @hash: the hash of the view to list only one
     * @limit: max count of views to list
     * @before: hash to list views before it
     * @after: hash to list views after it
     */
    views: Array<ViewInfo>;
};
/** User subgraph referencing objects like collections, functions and views */
export type SubgraphFunctionsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    hash?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
    name?: InputMaybe<Scalars['String']['input']>;
};
/** User subgraph referencing objects like collections, functions and views */
export type SubgraphViewsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    hash?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
    name?: InputMaybe<Scalars['String']['input']>;
};
/** Subgraph Information */
export type SubgraphInfo = {
    __typename?: 'SubgraphInfo';
    /** The subgraph Id */
    id: Scalars['Int']['output'];
};
/** Telemetry */
export type Telemetry = {
    __typename?: 'Telemetry';
    /** Get traces */
    traces: TracesResult;
};
/** Telemetry */
export type TelemetryTracesArgs = {
    after?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['Int']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
};
export type TraceInfo = {
    __typename?: 'TraceInfo';
    at: Scalars['String']['output'];
    duration?: Maybe<Scalars['Int']['output']>;
    error?: Maybe<Scalars['String']['output']>;
    fee?: Maybe<Scalars['String']['output']>;
    id: Scalars['Int']['output'];
    query: Scalars['String']['output'];
    rows?: Maybe<Scalars['Int']['output']>;
    user: Account;
    view?: Maybe<ViewInfo>;
};
export type TracesResult = {
    __typename?: 'TracesResult';
    error?: Maybe<Scalars['String']['output']>;
    status: Scalars['String']['output'];
    traces?: Maybe<Array<TraceInfo>>;
};
/** User information */
export type UserInfo = {
    __typename?: 'UserInfo';
    balance: Scalars['String']['output'];
    /** The user subgraph identifier */
    subgraph: Scalars['Int']['output'];
    /** The unique user identifier */
    userId: Scalars['Int']['output'];
    /** The user role (can be limited by an APIKEY) */
    userRole: Scalars['String']['output'];
    /** The user wallet */
    wallet: Scalars['String']['output'];
};
export type ViewFundingLog = {
    __typename?: 'ViewFundingLog';
    amount: Scalars['String']['output'];
    sponsor: Scalars['String']['output'];
    status: Scalars['String']['output'];
    timestamp: Scalars['String']['output'];
    view: Scalars['String']['output'];
};
export type ViewIndexingStatue = {
    __typename?: 'ViewIndexingStatue';
    leftClocks: Scalars['Int']['output'];
    status: Scalars['String']['output'];
};
/** Collection Information */
export type ViewInfo = {
    __typename?: 'ViewInfo';
    /** Wallet created the view */
    creator: Scalars['String']['output'];
    /** Description */
    description?: Maybe<Scalars['String']['output']>;
    dryRun: ViewStatus;
    /** Collection unique hash id */
    hashId: Scalars['String']['output'];
    /** Collection global identifier */
    identifier?: Maybe<Scalars['String']['output']>;
    /** Collection name in the user subgraph */
    name?: Maybe<Scalars['String']['output']>;
    /** Feeds the View's SQL refers to */
    references: Array<FeedInfo>;
    /** SQL query */
    sql: Scalars['String']['output'];
    status: ViewStatus;
    viewId: Scalars['Int']['output'];
};
export type ViewResult = {
    __typename?: 'ViewResult';
    data?: Maybe<Array<Array<Maybe<Scalars['String']['output']>>>>;
    /** Error message if error happens */
    error?: Maybe<Scalars['String']['output']>;
    header?: Maybe<Array<Scalars['String']['output']>>;
    /** Requested view name */
    name?: Maybe<Scalars['String']['output']>;
    /**
     * Merging status
     * can be Merged, Unchanged, Error
     */
    status: Scalars['String']['output'];
    /** The wallet created the view */
    view?: Maybe<ViewInfo>;
};
/** View specification */
export type ViewSpec = {
    /** Description */
    description?: InputMaybe<Scalars['String']['input']>;
    /** View unique name */
    identifier?: InputMaybe<Scalars['String']['input']>;
    /** View name in the subgraph */
    name?: InputMaybe<Scalars['String']['input']>;
    /** Sql expression */
    sql: Scalars['String']['input'];
};
export type ViewStatus = {
    __typename?: 'ViewStatus';
    errors: Array<ViewStatusData>;
    updates: Array<ViewStatusData>;
};
export type ViewStatusData = {
    __typename?: 'ViewStatusData';
    at?: Maybe<Scalars['String']['output']>;
    clock?: Maybe<Scalars['Int']['output']>;
    error?: Maybe<Scalars['String']['output']>;
    reference: FeedInfo;
};
export type WithdrawResult = {
    __typename?: 'WithdrawResult';
    amount?: Maybe<Scalars['String']['output']>;
    error?: Maybe<Scalars['String']['output']>;
    status: Scalars['String']['output'];
};
export type AliasAddMutationVariables = Exact<{
    hashId: Scalars['String']['input'];
    name: Scalars['String']['input'];
}>;
export type AliasAddMutation = {
    __typename?: 'Mutation';
    alias: {
        __typename?: 'AliasResult';
        status: string;
        function?: {
            __typename?: 'FunctionInfo';
            hashId: string;
            creator: string;
            name?: string | null;
            description?: string | null;
            network: string;
            identifier: string;
            inputs: Array<{
                __typename?: 'FunctionInputInfo';
                value?: string | null;
                constant?: string | null;
            }>;
            outputs: Array<{
                __typename?: 'FunctionOutputInfo';
                value?: string | null;
                name?: string | null;
            }>;
            contract?: {
                __typename?: 'FunctionContractInfo';
                address: string;
                abi: {
                    __typename?: 'FunctionContractAbiInfo';
                    name: string;
                    inputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                    outputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                };
            } | null;
        } | null;
        view?: {
            __typename?: 'ViewInfo';
            hashId: string;
            name?: string | null;
            description?: string | null;
            identifier?: string | null;
            sql: string;
            creator: string;
            references: Array<{
                __typename?: 'FeedInfo';
                hashId: string;
                function?: {
                    __typename?: 'FunctionInfo';
                    name?: string | null;
                    identifier: string;
                    hashId: string;
                    outputs: Array<{
                        __typename?: 'FunctionOutputInfo';
                        name?: string | null;
                        value?: string | null;
                    }>;
                    inputs: Array<{
                        __typename?: 'FunctionInputInfo';
                        value?: string | null;
                        constant?: string | null;
                    }>;
                    contract?: {
                        __typename?: 'FunctionContractInfo';
                        address: string;
                    } | null;
                } | null;
            }>;
        } | null;
    };
};
export type AliasRemoveMutationVariables = Exact<{
    name: Scalars['String']['input'];
}>;
export type AliasRemoveMutation = {
    __typename?: 'Mutation';
    drop: {
        __typename?: 'AliasResult';
        status: string;
        function?: {
            __typename?: 'FunctionInfo';
            hashId: string;
            creator: string;
            name?: string | null;
            description?: string | null;
            network: string;
            identifier: string;
            inputs: Array<{
                __typename?: 'FunctionInputInfo';
                value?: string | null;
                constant?: string | null;
            }>;
            outputs: Array<{
                __typename?: 'FunctionOutputInfo';
                value?: string | null;
                name?: string | null;
            }>;
            contract?: {
                __typename?: 'FunctionContractInfo';
                address: string;
                abi: {
                    __typename?: 'FunctionContractAbiInfo';
                    name: string;
                    inputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                    outputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                };
            } | null;
        } | null;
        view?: {
            __typename?: 'ViewInfo';
            hashId: string;
            name?: string | null;
            description?: string | null;
            identifier?: string | null;
            sql: string;
            creator: string;
            references: Array<{
                __typename?: 'FeedInfo';
                hashId: string;
                function?: {
                    __typename?: 'FunctionInfo';
                    name?: string | null;
                    identifier: string;
                    hashId: string;
                    outputs: Array<{
                        __typename?: 'FunctionOutputInfo';
                        name?: string | null;
                        value?: string | null;
                    }>;
                    inputs: Array<{
                        __typename?: 'FunctionInputInfo';
                        value?: string | null;
                        constant?: string | null;
                    }>;
                    contract?: {
                        __typename?: 'FunctionContractInfo';
                        address: string;
                    } | null;
                } | null;
            }>;
        } | null;
    };
};
export type ApiKeyListQueryVariables = Exact<{
    key?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    after?: InputMaybe<Scalars['String']['input']>;
}>;
export type ApiKeyListQuery = {
    __typename?: 'Query';
    keys: Array<{
        __typename?: 'KeyInfo';
        userId: number;
        key: string;
        cert: Array<number>;
        role: string;
        status: string;
    }>;
};
export type ApiKeyCertifyMutationVariables = Exact<{
    cert: Scalars['String']['input'];
}>;
export type ApiKeyCertifyMutation = {
    __typename?: 'Mutation';
    certifyKey: {
        __typename?: 'KeyInfo';
        userId: number;
        key: string;
        cert: Array<number>;
        role: string;
        status: string;
    };
};
export type ApiKeyDisableMutationVariables = Exact<{
    key: Scalars['String']['input'];
}>;
export type ApiKeyDisableMutation = {
    __typename?: 'Mutation';
    disableKey: {
        __typename?: 'KeyInfo';
        userId: number;
        key: string;
        cert: Array<number>;
        role: string;
        status: string;
    };
};
export type ApiKeyEnableMutationVariables = Exact<{
    key: Scalars['String']['input'];
}>;
export type ApiKeyEnableMutation = {
    __typename?: 'Mutation';
    enableKey: {
        __typename?: 'KeyInfo';
        userId: number;
        key: string;
        cert: Array<number>;
        role: string;
        status: string;
    };
};
export type ApiKeyRevokeMutationVariables = Exact<{
    key: Scalars['String']['input'];
}>;
export type ApiKeyRevokeMutation = {
    __typename?: 'Mutation';
    revokeKey: {
        __typename?: 'KeyInfo';
        userId: number;
        key: string;
        cert: Array<number>;
        role: string;
        status: string;
    };
};
export type DataQueryVariables = Exact<{
    identifier: Scalars['String']['input'];
    limit?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['Int']['input']>;
    after?: InputMaybe<Scalars['Int']['input']>;
}>;
export type DataQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        query: {
            __typename?: 'QueryResult';
            header: Array<string>;
            data: Array<Array<string | null>>;
        };
    };
};
export type ViewInfoFragmentFragment = {
    __typename?: 'ViewInfo';
    hashId: string;
    name?: string | null;
    description?: string | null;
    identifier?: string | null;
    sql: string;
    creator: string;
    references: Array<{
        __typename?: 'FeedInfo';
        hashId: string;
        function?: {
            __typename?: 'FunctionInfo';
            name?: string | null;
            identifier: string;
            hashId: string;
            outputs: Array<{
                __typename?: 'FunctionOutputInfo';
                name?: string | null;
                value?: string | null;
            }>;
            inputs: Array<{
                __typename?: 'FunctionInputInfo';
                value?: string | null;
                constant?: string | null;
            }>;
            contract?: {
                __typename?: 'FunctionContractInfo';
                address: string;
            } | null;
        } | null;
    }>;
};
export type FunctionInfoFragmentFragment = {
    __typename?: 'FunctionInfo';
    hashId: string;
    creator: string;
    name?: string | null;
    description?: string | null;
    network: string;
    identifier: string;
    inputs: Array<{
        __typename?: 'FunctionInputInfo';
        value?: string | null;
        constant?: string | null;
    }>;
    outputs: Array<{
        __typename?: 'FunctionOutputInfo';
        value?: string | null;
        name?: string | null;
    }>;
    contract?: {
        __typename?: 'FunctionContractInfo';
        address: string;
        abi: {
            __typename?: 'FunctionContractAbiInfo';
            name: string;
            inputs: Array<{
                __typename?: 'ContractInOutInfo';
                type: string;
            }>;
            outputs: Array<{
                __typename?: 'ContractInOutInfo';
                type: string;
            }>;
        };
    } | null;
};
export type ApiKeyInfoFragment = {
    __typename?: 'KeyInfo';
    userId: number;
    key: string;
    cert: Array<number>;
    role: string;
    status: string;
};
export type FunctionCreateMutationVariables = Exact<{
    function?: InputMaybe<Array<FunctionSpec> | FunctionSpec>;
}>;
export type FunctionCreateMutation = {
    __typename?: 'Mutation';
    merge: {
        __typename?: 'MergeResult';
        status: string;
        functions: Array<{
            __typename?: 'FunctionResult';
            status: string;
            error?: string | null;
            name?: string | null;
            function?: {
                __typename?: 'FunctionInfo';
                hashId: string;
                creator: string;
                name?: string | null;
                description?: string | null;
                network: string;
                identifier: string;
                inputs: Array<{
                    __typename?: 'FunctionInputInfo';
                    value?: string | null;
                    constant?: string | null;
                }>;
                outputs: Array<{
                    __typename?: 'FunctionOutputInfo';
                    value?: string | null;
                    name?: string | null;
                }>;
                contract?: {
                    __typename?: 'FunctionContractInfo';
                    address: string;
                    abi: {
                        __typename?: 'FunctionContractAbiInfo';
                        name: string;
                        inputs: Array<{
                            __typename?: 'ContractInOutInfo';
                            type: string;
                        }>;
                        outputs: Array<{
                            __typename?: 'ContractInOutInfo';
                            type: string;
                        }>;
                    };
                } | null;
            } | null;
        }>;
    };
};
export type FunctionSubgraphQueryVariables = Exact<{
    hash?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    after?: InputMaybe<Scalars['String']['input']>;
}>;
export type FunctionSubgraphQuery = {
    __typename?: 'Query';
    subgraph: {
        __typename?: 'Subgraph';
        functions: Array<{
            __typename?: 'FunctionInfo';
            hashId: string;
            creator: string;
            name?: string | null;
            description?: string | null;
            network: string;
            identifier: string;
            inputs: Array<{
                __typename?: 'FunctionInputInfo';
                value?: string | null;
                constant?: string | null;
            }>;
            outputs: Array<{
                __typename?: 'FunctionOutputInfo';
                value?: string | null;
                name?: string | null;
            }>;
            contract?: {
                __typename?: 'FunctionContractInfo';
                address: string;
                abi: {
                    __typename?: 'FunctionContractAbiInfo';
                    name: string;
                    inputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                    outputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                };
            } | null;
        }>;
    };
};
export type FunctionGlobalQueryVariables = Exact<{
    hash?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    after?: InputMaybe<Scalars['String']['input']>;
}>;
export type FunctionGlobalQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        functions: Array<{
            __typename?: 'FunctionInfo';
            hashId: string;
            creator: string;
            name?: string | null;
            description?: string | null;
            network: string;
            identifier: string;
            inputs: Array<{
                __typename?: 'FunctionInputInfo';
                value?: string | null;
                constant?: string | null;
            }>;
            outputs: Array<{
                __typename?: 'FunctionOutputInfo';
                value?: string | null;
                name?: string | null;
            }>;
            contract?: {
                __typename?: 'FunctionContractInfo';
                address: string;
                abi: {
                    __typename?: 'FunctionContractAbiInfo';
                    name: string;
                    inputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                    outputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                };
            } | null;
        }>;
    };
};
export type FunctionGetQueryVariables = Exact<{
    hash?: InputMaybe<Scalars['String']['input']>;
}>;
export type FunctionGetQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        functions: Array<{
            __typename?: 'FunctionInfo';
            hashId: string;
            creator: string;
            name?: string | null;
            description?: string | null;
            network: string;
            identifier: string;
            inputs: Array<{
                __typename?: 'FunctionInputInfo';
                value?: string | null;
                constant?: string | null;
            }>;
            outputs: Array<{
                __typename?: 'FunctionOutputInfo';
                value?: string | null;
                name?: string | null;
            }>;
            contract?: {
                __typename?: 'FunctionContractInfo';
                address: string;
                abi: {
                    __typename?: 'FunctionContractAbiInfo';
                    name: string;
                    inputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                    outputs: Array<{
                        __typename?: 'ContractInOutInfo';
                        type: string;
                    }>;
                };
            } | null;
        }>;
    };
};
export type SmartContractListFragmentFragment = {
    __typename?: 'ContractInfo';
    id: number;
    address: string;
    network: string;
    identifier?: string | null;
    description?: string | null;
    creator: string;
    createdAt: string;
    abi: Array<{
        __typename?: 'FunctionContractAbiInfo';
        inputs: Array<{
            __typename?: 'ContractInOutInfo';
            type: string;
        }>;
        outputs: Array<{
            __typename?: 'ContractInOutInfo';
            type: string;
        }>;
    }>;
    functions: Array<{
        __typename?: 'FunctionInfo';
        hashId: string;
        name?: string | null;
    }>;
};
export type SmartContractGlobalQueryVariables = Exact<{
    address?: InputMaybe<Scalars['String']['input']>;
    after?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['Int']['input']>;
    network?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
}>;
export type SmartContractGlobalQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        contracts: Array<{
            __typename?: 'ContractInfo';
            id: number;
            address: string;
            network: string;
            identifier?: string | null;
            description?: string | null;
            creator: string;
            createdAt: string;
            abi: Array<{
                __typename?: 'FunctionContractAbiInfo';
                inputs: Array<{
                    __typename?: 'ContractInOutInfo';
                    type: string;
                }>;
                outputs: Array<{
                    __typename?: 'ContractInOutInfo';
                    type: string;
                }>;
            }>;
            functions: Array<{
                __typename?: 'FunctionInfo';
                hashId: string;
                name?: string | null;
            }>;
        }>;
    };
};
export type SmartContractGetQueryVariables = Exact<{
    address: Scalars['String']['input'];
}>;
export type SmartContractGetQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        contracts: Array<{
            __typename?: 'ContractInfo';
            address: string;
            functions: Array<{
                __typename?: 'FunctionInfo';
                hashId: string;
                creator: string;
                name?: string | null;
                description?: string | null;
                network: string;
                identifier: string;
                inputs: Array<{
                    __typename?: 'FunctionInputInfo';
                    value?: string | null;
                    constant?: string | null;
                }>;
                outputs: Array<{
                    __typename?: 'FunctionOutputInfo';
                    value?: string | null;
                    name?: string | null;
                }>;
                contract?: {
                    __typename?: 'FunctionContractInfo';
                    address: string;
                    abi: {
                        __typename?: 'FunctionContractAbiInfo';
                        name: string;
                        inputs: Array<{
                            __typename?: 'ContractInOutInfo';
                            type: string;
                        }>;
                        outputs: Array<{
                            __typename?: 'ContractInOutInfo';
                            type: string;
                        }>;
                    };
                } | null;
            }>;
        }>;
    };
};
export type ListSmartContractMutationVariables = Exact<{
    address: Scalars['String']['input'];
    network: Scalars['String']['input'];
    identifier: Scalars['String']['input'];
    chain?: InputMaybe<Scalars['String']['input']>;
    abi?: InputMaybe<Scalars['String']['input']>;
    methods?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
    scope?: InputMaybe<Scalars['String']['input']>;
}>;
export type ListSmartContractMutation = {
    __typename?: 'Mutation';
    contract: {
        __typename?: 'ContractMutationResult';
        status: string;
        error?: string | null;
        contract: {
            __typename?: 'ContractResult';
            status: string;
            error?: string | null;
            address: string;
            network: string;
            identifier?: string | null;
        };
        functions: Array<{
            __typename?: 'FunctionResult';
            status: string;
            error?: string | null;
            name?: string | null;
            function?: {
                __typename?: 'FunctionInfo';
                hashId: string;
                network: string;
                name?: string | null;
                identifier: string;
                description?: string | null;
                outputs: Array<{
                    __typename?: 'FunctionOutputInfo';
                    name?: string | null;
                    value?: string | null;
                }>;
                inputs: Array<{
                    __typename?: 'FunctionInputInfo';
                    constant?: string | null;
                    value?: string | null;
                }>;
            } | null;
        }>;
    };
};
export type DryRunListSmartContractMutationVariables = Exact<{
    address: Scalars['String']['input'];
    network: Scalars['String']['input'];
    identifier: Scalars['String']['input'];
    chain?: InputMaybe<Scalars['String']['input']>;
    abi?: InputMaybe<Scalars['String']['input']>;
}>;
export type DryRunListSmartContractMutation = {
    __typename?: 'Mutation';
    contract: {
        __typename?: 'ContractMutationResult';
        status: string;
        error?: string | null;
        contract: {
            __typename?: 'ContractResult';
            error?: string | null;
            status: string;
            address: string;
            network: string;
            identifier?: string | null;
        };
        functions: Array<{
            __typename?: 'FunctionResult';
            status: string;
            error?: string | null;
            name?: string | null;
            function?: {
                __typename?: 'FunctionInfo';
                hashId: string;
                network: string;
                name?: string | null;
                identifier: string;
                description?: string | null;
                outputs: Array<{
                    __typename?: 'FunctionOutputInfo';
                    name?: string | null;
                    value?: string | null;
                }>;
                inputs: Array<{
                    __typename?: 'FunctionInputInfo';
                    constant?: string | null;
                    value?: string | null;
                }>;
            } | null;
        }>;
    };
};
export type GlobalStatsQueryVariables = Exact<{
    [key: string]: never;
}>;
export type GlobalStatsQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        networkCount: number;
        contractCount: number;
        functionCount: number;
        viewCount: number;
        totalQuery: number;
        totalQueryFee: string;
        fundLocked: string;
        fundLockedInView: string;
    };
};
export type TotalContractsQueryVariables = Exact<{
    [key: string]: never;
}>;
export type TotalContractsQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        contractCount: number;
    };
};
export type TotalViewsQueryVariables = Exact<{
    [key: string]: never;
}>;
export type TotalViewsQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        viewCount: number;
    };
};
export type UserStatsQueryVariables = Exact<{
    userId: Scalars['Int']['input'];
}>;
export type UserStatsQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        totalUserQuery: number;
        totalUserQueryFee: string;
        rewardPerDataCollector: string;
        totalUserSponsor: string;
        totalUserRewards: string;
    };
};
export type UserGraphQueryVariables = Exact<{
    userId: Scalars['Int']['input'];
    isWeek: Scalars['Boolean']['input'];
    isMonth: Scalars['Boolean']['input'];
    isAllTime: Scalars['Boolean']['input'];
}>;
export type UserGraphQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        totalUserQueryLastWeek?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        totalUserQueryLastMonth?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        totalUserQueryAllTime?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
    };
};
export type BalanceHistoryQueryVariables = Exact<{
    userId: Scalars['Int']['input'];
}>;
export type BalanceHistoryQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        balanceHistory: Array<{
            __typename?: 'BalanceHistory';
            changeType: string;
            timestamp: string;
            amount: string;
        }>;
    };
};
export type SskStatsQueryVariables = Exact<{
    ssk: Scalars['String']['input'];
}>;
export type SskStatsQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        totalSskQuery: number;
        totalSskQueryFee: string;
    };
};
export type SskGraphQueryVariables = Exact<{
    ssk: Scalars['String']['input'];
    isWeek: Scalars['Boolean']['input'];
    isMonth: Scalars['Boolean']['input'];
    isAllTime: Scalars['Boolean']['input'];
}>;
export type SskGraphQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        totalSskQueryLastWeek?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        totalSskQueryLastMonth?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        totalSskQueryAllTime?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
    };
};
export type ViewStatsQueryVariables = Exact<{
    viewName: Scalars['String']['input'];
}>;
export type ViewStatsQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        totalQueryPerView: number;
        uniqueUserQueryPerView: number;
        rewardPerView: string;
        fundLockedInView: string;
        minimumSponsor: {
            __typename?: 'MinimumSponsor';
            cycles: number;
            amount: string;
        };
        viewIndexingStatus: {
            __typename?: 'ViewIndexingStatue';
            status: string;
            leftClocks: number;
        };
    };
};
export type ViewGraphQueryVariables = Exact<{
    viewName: Scalars['String']['input'];
    isWeek: Scalars['Boolean']['input'];
    isMonth: Scalars['Boolean']['input'];
    isAllTime: Scalars['Boolean']['input'];
}>;
export type ViewGraphQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        totalQueryPerViewLastWeek?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        totalQueryPerViewLastMonth?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        totalQueryPerViewAllTime?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        uniqueUserQueryPerViewLastWeek?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        uniqueUserQueryPerViewLastMonth?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        uniqueUserQueryPerViewAllTime?: Array<{
            __typename?: 'CountWithDay';
            date: string;
            count: number;
        }>;
        rewardPerViewLastWeek?: Array<{
            __typename?: 'BalanceWithDay';
            date: string;
            balance: string;
        }>;
    };
};
export type ViewFundLogQueryVariables = Exact<{
    viewName: Scalars['String']['input'];
}>;
export type ViewFundLogQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        viewFundLog: Array<{
            __typename?: 'ViewFundingLog';
            view: string;
            sponsor: string;
            status: string;
            timestamp: string;
            amount: string;
        }>;
    };
};
export type UserFundedViewsQueryVariables = Exact<{
    userId: Scalars['Int']['input'];
}>;
export type UserFundedViewsQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        fundedViewLog: Array<{
            __typename?: 'FundedView';
            name: string;
            hash: string;
            funded: string;
            fundedAt: string;
            wallet: string;
        }>;
    };
};
export type WithdrawTokensMutationVariables = Exact<{
    amount: Scalars['String']['input'];
}>;
export type WithdrawTokensMutation = {
    __typename?: 'Mutation';
    withdrawToken: {
        __typename?: 'WithdrawResult';
        status: string;
        error?: string | null;
        amount?: string | null;
    };
};
export type SponsorViewMutationVariables = Exact<{
    viewName: Scalars['String']['input'];
    amount: Scalars['String']['input'];
}>;
export type SponsorViewMutation = {
    __typename?: 'Mutation';
    sponsorView: {
        __typename?: 'SponsorshipResult';
        status: string;
        error?: string | null;
        amount?: string | null;
    };
};
export type UserCreateMutationVariables = Exact<{
    address: Scalars['String']['input'];
}>;
export type UserCreateMutation = {
    __typename?: 'Mutation';
    createAccount: {
        __typename?: 'UserInfo';
        userId: number;
        wallet: string;
        userRole: string;
        subgraph: number;
        balance: string;
    };
};
export type UserListQueryVariables = Exact<{
    limit?: InputMaybe<Scalars['Int']['input']>;
    before?: InputMaybe<Scalars['Int']['input']>;
    after?: InputMaybe<Scalars['Int']['input']>;
}>;
export type UserListQuery = {
    __typename?: 'Query';
    users: Array<{
        __typename?: 'UserInfo';
        userId: number;
        wallet: string;
        userRole: string;
        subgraph: number;
        balance: string;
    }>;
};
export type UserGetQueryVariables = Exact<{
    [key: string]: never;
}>;
export type UserGetQuery = {
    __typename?: 'Query';
    userInfo: {
        __typename?: 'UserInfo';
        userId: number;
        wallet: string;
        userRole: string;
        subgraph: number;
        balance: string;
    };
};
export type ViewCreateMutationVariables = Exact<{
    view?: InputMaybe<Array<ViewSpec> | ViewSpec>;
}>;
export type ViewCreateMutation = {
    __typename?: 'Mutation';
    merge: {
        __typename?: 'MergeResult';
        status: string;
        views: Array<{
            __typename?: 'ViewResult';
            status: string;
            error?: string | null;
            name?: string | null;
            view?: {
                __typename?: 'ViewInfo';
                hashId: string;
                name?: string | null;
                description?: string | null;
                identifier?: string | null;
                sql: string;
                creator: string;
                references: Array<{
                    __typename?: 'FeedInfo';
                    hashId: string;
                    function?: {
                        __typename?: 'FunctionInfo';
                        name?: string | null;
                        identifier: string;
                        hashId: string;
                        outputs: Array<{
                            __typename?: 'FunctionOutputInfo';
                            name?: string | null;
                            value?: string | null;
                        }>;
                        inputs: Array<{
                            __typename?: 'FunctionInputInfo';
                            value?: string | null;
                            constant?: string | null;
                        }>;
                        contract?: {
                            __typename?: 'FunctionContractInfo';
                            address: string;
                        } | null;
                    } | null;
                }>;
            } | null;
        }>;
    };
};
export type ViewDryRunMutationVariables = Exact<{
    view?: InputMaybe<Array<ViewSpec> | ViewSpec>;
}>;
export type ViewDryRunMutation = {
    __typename?: 'Mutation';
    merge: {
        __typename?: 'MergeResult';
        status: string;
        views: Array<{
            __typename?: 'ViewResult';
            status: string;
            error?: string | null;
            name?: string | null;
            data?: Array<Array<string | null>> | null;
            header?: Array<string> | null;
            view?: {
                __typename?: 'ViewInfo';
                name?: string | null;
                identifier?: string | null;
                hashId: string;
                dryRun: {
                    __typename?: 'ViewStatus';
                    errors: Array<{
                        __typename?: 'ViewStatusData';
                        at?: string | null;
                        clock?: number | null;
                        error?: string | null;
                    }>;
                    updates: Array<{
                        __typename?: 'ViewStatusData';
                        at?: string | null;
                        clock?: number | null;
                        error?: string | null;
                    }>;
                };
            } | null;
        }>;
    };
};
export type ViewGlobalQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    hash?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
}>;
export type ViewGlobalQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        count: {
            __typename?: 'Count';
            views: number;
        };
        views: Array<{
            __typename?: 'ViewInfo';
            hashId: string;
            name?: string | null;
            description?: string | null;
            identifier?: string | null;
            sql: string;
            creator: string;
            references: Array<{
                __typename?: 'FeedInfo';
                hashId: string;
                function?: {
                    __typename?: 'FunctionInfo';
                    name?: string | null;
                    identifier: string;
                    hashId: string;
                    outputs: Array<{
                        __typename?: 'FunctionOutputInfo';
                        name?: string | null;
                        value?: string | null;
                    }>;
                    inputs: Array<{
                        __typename?: 'FunctionInputInfo';
                        value?: string | null;
                        constant?: string | null;
                    }>;
                    contract?: {
                        __typename?: 'FunctionContractInfo';
                        address: string;
                    } | null;
                } | null;
            }>;
        }>;
    };
};
export type ViewSubgraphQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']['input']>;
    before?: InputMaybe<Scalars['String']['input']>;
    hash?: InputMaybe<Scalars['String']['input']>;
    limit?: InputMaybe<Scalars['Int']['input']>;
}>;
export type ViewSubgraphQuery = {
    __typename?: 'Query';
    subgraph: {
        __typename?: 'Subgraph';
        count: {
            __typename?: 'Count';
            views: number;
        };
        views: Array<{
            __typename?: 'ViewInfo';
            hashId: string;
            name?: string | null;
            description?: string | null;
            identifier?: string | null;
            sql: string;
            creator: string;
            references: Array<{
                __typename?: 'FeedInfo';
                hashId: string;
                function?: {
                    __typename?: 'FunctionInfo';
                    name?: string | null;
                    identifier: string;
                    hashId: string;
                    outputs: Array<{
                        __typename?: 'FunctionOutputInfo';
                        name?: string | null;
                        value?: string | null;
                    }>;
                    inputs: Array<{
                        __typename?: 'FunctionInputInfo';
                        value?: string | null;
                        constant?: string | null;
                    }>;
                    contract?: {
                        __typename?: 'FunctionContractInfo';
                        address: string;
                    } | null;
                } | null;
            }>;
        }>;
    };
};
export type ViewGetQueryVariables = Exact<{
    hashId: Scalars['String']['input'];
}>;
export type ViewGetQuery = {
    __typename?: 'Query';
    global: {
        __typename?: 'Global';
        views: Array<{
            __typename?: 'ViewInfo';
            hashId: string;
            name?: string | null;
            description?: string | null;
            identifier?: string | null;
            sql: string;
            creator: string;
            references: Array<{
                __typename?: 'FeedInfo';
                hashId: string;
                function?: {
                    __typename?: 'FunctionInfo';
                    name?: string | null;
                    identifier: string;
                    hashId: string;
                    outputs: Array<{
                        __typename?: 'FunctionOutputInfo';
                        name?: string | null;
                        value?: string | null;
                    }>;
                    inputs: Array<{
                        __typename?: 'FunctionInputInfo';
                        value?: string | null;
                        constant?: string | null;
                    }>;
                    contract?: {
                        __typename?: 'FunctionContractInfo';
                        address: string;
                    } | null;
                } | null;
            }>;
        }>;
    };
};
export declare const ViewInfoFragmentFragmentDoc: import("graphql").DocumentNode;
export declare const FunctionInfoFragmentFragmentDoc: import("graphql").DocumentNode;
export declare const ApiKeyInfoFragmentDoc: import("graphql").DocumentNode;
export declare const SmartContractListFragmentFragmentDoc: import("graphql").DocumentNode;
export declare const AliasAddDocument: import("graphql").DocumentNode;
export declare const AliasRemoveDocument: import("graphql").DocumentNode;
export declare const ApiKeyListDocument: import("graphql").DocumentNode;
export declare const ApiKeyCertifyDocument: import("graphql").DocumentNode;
export declare const ApiKeyDisableDocument: import("graphql").DocumentNode;
export declare const ApiKeyEnableDocument: import("graphql").DocumentNode;
export declare const ApiKeyRevokeDocument: import("graphql").DocumentNode;
export declare const DataDocument: import("graphql").DocumentNode;
export declare const FunctionCreateDocument: import("graphql").DocumentNode;
export declare const FunctionSubgraphDocument: import("graphql").DocumentNode;
export declare const FunctionGlobalDocument: import("graphql").DocumentNode;
export declare const FunctionGetDocument: import("graphql").DocumentNode;
export declare const SmartContractGlobalDocument: import("graphql").DocumentNode;
export declare const SmartContractGetDocument: import("graphql").DocumentNode;
export declare const ListSmartContractDocument: import("graphql").DocumentNode;
export declare const DryRunListSmartContractDocument: import("graphql").DocumentNode;
export declare const GlobalStatsDocument: import("graphql").DocumentNode;
export declare const TotalContractsDocument: import("graphql").DocumentNode;
export declare const TotalViewsDocument: import("graphql").DocumentNode;
export declare const UserStatsDocument: import("graphql").DocumentNode;
export declare const UserGraphDocument: import("graphql").DocumentNode;
export declare const BalanceHistoryDocument: import("graphql").DocumentNode;
export declare const SskStatsDocument: import("graphql").DocumentNode;
export declare const SskGraphDocument: import("graphql").DocumentNode;
export declare const ViewStatsDocument: import("graphql").DocumentNode;
export declare const ViewGraphDocument: import("graphql").DocumentNode;
export declare const ViewFundLogDocument: import("graphql").DocumentNode;
export declare const UserFundedViewsDocument: import("graphql").DocumentNode;
export declare const WithdrawTokensDocument: import("graphql").DocumentNode;
export declare const SponsorViewDocument: import("graphql").DocumentNode;
export declare const UserCreateDocument: import("graphql").DocumentNode;
export declare const UserListDocument: import("graphql").DocumentNode;
export declare const UserGetDocument: import("graphql").DocumentNode;
export declare const ViewCreateDocument: import("graphql").DocumentNode;
export declare const ViewDryRunDocument: import("graphql").DocumentNode;
export declare const ViewGlobalDocument: import("graphql").DocumentNode;
export declare const ViewSubgraphDocument: import("graphql").DocumentNode;
export declare const ViewGetDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    aliasAdd(variables: AliasAddMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AliasAddMutation>;
    aliasRemove(variables: AliasRemoveMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AliasRemoveMutation>;
    apiKeyList(variables?: ApiKeyListQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ApiKeyListQuery>;
    apiKeyCertify(variables: ApiKeyCertifyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ApiKeyCertifyMutation>;
    apiKeyDisable(variables: ApiKeyDisableMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ApiKeyDisableMutation>;
    apiKeyEnable(variables: ApiKeyEnableMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ApiKeyEnableMutation>;
    apiKeyRevoke(variables: ApiKeyRevokeMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ApiKeyRevokeMutation>;
    data(variables: DataQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DataQuery>;
    functionCreate(variables?: FunctionCreateMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FunctionCreateMutation>;
    functionSubgraph(variables?: FunctionSubgraphQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FunctionSubgraphQuery>;
    functionGlobal(variables?: FunctionGlobalQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FunctionGlobalQuery>;
    functionGet(variables?: FunctionGetQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FunctionGetQuery>;
    smartContractGlobal(variables?: SmartContractGlobalQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SmartContractGlobalQuery>;
    smartContractGet(variables: SmartContractGetQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SmartContractGetQuery>;
    listSmartContract(variables: ListSmartContractMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ListSmartContractMutation>;
    dryRunListSmartContract(variables: DryRunListSmartContractMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DryRunListSmartContractMutation>;
    GlobalStats(variables?: GlobalStatsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GlobalStatsQuery>;
    TotalContracts(variables?: TotalContractsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<TotalContractsQuery>;
    TotalViews(variables?: TotalViewsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<TotalViewsQuery>;
    UserStats(variables: UserStatsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UserStatsQuery>;
    UserGraph(variables: UserGraphQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UserGraphQuery>;
    BalanceHistory(variables: BalanceHistoryQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<BalanceHistoryQuery>;
    SSKStats(variables: SskStatsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SskStatsQuery>;
    SSKGraph(variables: SskGraphQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SskGraphQuery>;
    ViewStats(variables: ViewStatsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ViewStatsQuery>;
    ViewGraph(variables: ViewGraphQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ViewGraphQuery>;
    ViewFundLog(variables: ViewFundLogQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ViewFundLogQuery>;
    UserFundedViews(variables: UserFundedViewsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UserFundedViewsQuery>;
    withdrawTokens(variables: WithdrawTokensMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<WithdrawTokensMutation>;
    sponsorView(variables: SponsorViewMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SponsorViewMutation>;
    userCreate(variables: UserCreateMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UserCreateMutation>;
    userList(variables?: UserListQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UserListQuery>;
    userGet(variables?: UserGetQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UserGetQuery>;
    viewCreate(variables?: ViewCreateMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ViewCreateMutation>;
    viewDryRun(variables?: ViewDryRunMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ViewDryRunMutation>;
    viewGlobal(variables?: ViewGlobalQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ViewGlobalQuery>;
    viewSubgraph(variables?: ViewSubgraphQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ViewSubgraphQuery>;
    viewGet(variables: ViewGetQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ViewGetQuery>;
};
export type Sdk = ReturnType<typeof getSdk>;
//# sourceMappingURL=generated.d.ts.map