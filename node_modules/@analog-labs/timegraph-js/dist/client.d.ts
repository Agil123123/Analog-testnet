import { GraphQLClient } from 'graphql-request';
import * as g from './gql';
import * as types from './types';
export declare class TimegraphClient {
    /**
     * The {@link https://www.npmjs.com/package/graphql-request GraphQlClient} instance used by the timegraph client. It can be used to perform custom queries beyond those provided.
     *
     * ```
     *
     * const timegraph = new TimegraphClient({ url, sessionKey });
     * const query = await timegraph.client.request<{
     *   // Custom return type
     * }>({
     *   document: gql`
     *     query {
     *       ...
     *     }
     *   `
     * })
     * ```
     */
    client: GraphQLClient;
    private _sdk;
    private _sessionKey;
    /**
     * Creates a new ```TimegraphClient``` instance.
     * @param {types.TimegraphClientOptions['url']} args.url the timegraph URL
     * @param {types.TimegraphClientOptions['sessionKey']} args.sessionKey a valid session key for the timegraph. This key is passed in the ```Authorization``` header for all subsequent requests.
     * @returns {TimegraphClient} a new TimegraphClient instance
     */
    constructor({ url, sessionKey }: types.TimegraphClientOptions);
    /**
     * Generates a type-safe GraphQL query based on the auto-generated SDK function and a destructuring extract function.
     */
    protected request<QueryKey extends keyof g.Sdk, ResultType = Awaited<ReturnType<g.Sdk[QueryKey]>>>(fn: QueryKey, extract: (_: Awaited<ReturnType<g.Sdk[QueryKey]>>, __: Parameters<g.Sdk[QueryKey]>) => ResultType): types.SdkRequest<QueryKey, ResultType>;
    user: types.TimegraphUser;
    tokenomics: types.TimegraphTokenomics;
    telemetry: types.TimegraphTelemetry;
    apiKey: types.TimegraphApiKey;
    fn: types.TimegraphFn;
    smartContract: types.TimegraphSmartContract;
    view: types.TimegraphView;
    /**
     * Globally fetch stored data from a desired  view
     * @param {types.DataQueryVariables['identifier']} args.identifier. the desired  view's hashId, or global identifier
     * @param {types.DataQueryVariables['limit']} args.limit limit result set to this amount
     * @param {types.DataQueryVariables['before']} args.before fetch data only before this cycle
     * @param {types.DataQueryVariables['after']} args.after fetch data only after this cycle
     * @returns {types.QueryResult} the retrieved query data
     */
    data: types.SdkRequest<"data", {
        __typename?: "QueryResult" | undefined;
        header: string[];
        data: (string | null)[][];
    }>;
    alias: {
        /**
         * Alias a function, or view from another user to the current user's own subgraph.
         * @param {types.AliasMutationVariables['identifier']} args.identifier the hashId of the desired artifact
         * @param {types.AliasMutationVariables['name']} args.name the unique string identifier that will be used for the artifact in the user's subgraph
         * @returns {types.AliasResult} the ```AliasResult``` including the operation's status and the newly aliased resource
         */
        add: types.SdkRequest<"aliasAdd", {
            __typename?: "AliasResult" | undefined;
            status: string;
            function?: {
                __typename?: "FunctionInfo" | undefined;
                hashId: string;
                creator: string;
                name?: string | null | undefined;
                description?: string | null | undefined;
                network: string;
                identifier: string;
                inputs: {
                    __typename?: "FunctionInputInfo" | undefined;
                    value?: string | null | undefined;
                    constant?: string | null | undefined;
                }[];
                outputs: {
                    __typename?: "FunctionOutputInfo" | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                }[];
                contract?: {
                    __typename?: "FunctionContractInfo" | undefined;
                    address: string;
                    abi: {
                        __typename?: "FunctionContractAbiInfo" | undefined;
                        name: string;
                        inputs: {
                            __typename?: "ContractInOutInfo" | undefined;
                            type: string;
                        }[];
                        outputs: {
                            __typename?: "ContractInOutInfo" | undefined;
                            type: string;
                        }[];
                    };
                } | null | undefined;
            } | null | undefined;
            view?: {
                __typename?: "ViewInfo" | undefined;
                hashId: string;
                name?: string | null | undefined;
                description?: string | null | undefined;
                identifier?: string | null | undefined;
                sql: string;
                creator: string;
                references: {
                    __typename?: "FeedInfo" | undefined;
                    hashId: string;
                    function?: {
                        __typename?: "FunctionInfo" | undefined;
                        name?: string | null | undefined;
                        identifier: string;
                        hashId: string;
                        outputs: {
                            __typename?: "FunctionOutputInfo" | undefined;
                            name?: string | null | undefined;
                            value?: string | null | undefined;
                        }[];
                        inputs: {
                            __typename?: "FunctionInputInfo" | undefined;
                            value?: string | null | undefined;
                            constant?: string | null | undefined;
                        }[];
                        contract?: {
                            __typename?: "FunctionContractInfo" | undefined;
                            address: string;
                        } | null | undefined;
                    } | null | undefined;
                }[];
            } | null | undefined;
        }>;
        /**
         * Remove a previously added alias from the current user's subgraph
         * @param {types.AliasMutationVariables['name']} args.name the aliased name of the artifact to be removed
         * @returns {types.AliasResult} the ```AliasResult``` including the operation's status and the just-removed artifact
         */
        remove: types.SdkRequest<"aliasRemove", {
            __typename?: "AliasResult" | undefined;
            status: string;
            function?: {
                __typename?: "FunctionInfo" | undefined;
                hashId: string;
                creator: string;
                name?: string | null | undefined;
                description?: string | null | undefined;
                network: string;
                identifier: string;
                inputs: {
                    __typename?: "FunctionInputInfo" | undefined;
                    value?: string | null | undefined;
                    constant?: string | null | undefined;
                }[];
                outputs: {
                    __typename?: "FunctionOutputInfo" | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                }[];
                contract?: {
                    __typename?: "FunctionContractInfo" | undefined;
                    address: string;
                    abi: {
                        __typename?: "FunctionContractAbiInfo" | undefined;
                        name: string;
                        inputs: {
                            __typename?: "ContractInOutInfo" | undefined;
                            type: string;
                        }[];
                        outputs: {
                            __typename?: "ContractInOutInfo" | undefined;
                            type: string;
                        }[];
                    };
                } | null | undefined;
            } | null | undefined;
            view?: {
                __typename?: "ViewInfo" | undefined;
                hashId: string;
                name?: string | null | undefined;
                description?: string | null | undefined;
                identifier?: string | null | undefined;
                sql: string;
                creator: string;
                references: {
                    __typename?: "FeedInfo" | undefined;
                    hashId: string;
                    function?: {
                        __typename?: "FunctionInfo" | undefined;
                        name?: string | null | undefined;
                        identifier: string;
                        hashId: string;
                        outputs: {
                            __typename?: "FunctionOutputInfo" | undefined;
                            name?: string | null | undefined;
                            value?: string | null | undefined;
                        }[];
                        inputs: {
                            __typename?: "FunctionInputInfo" | undefined;
                            value?: string | null | undefined;
                            constant?: string | null | undefined;
                        }[];
                        contract?: {
                            __typename?: "FunctionContractInfo" | undefined;
                            address: string;
                        } | null | undefined;
                    } | null | undefined;
                }[];
            } | null | undefined;
        }>;
    };
    /**
     * Accessors for performing queries and returning the raw GraphQL responses, without any destructuring helpers applied
     */
    raw: {
        user: {
            create: types.SdkRequest<"userCreate", g.UserCreateMutation>;
            get: types.SdkRequest<"userGet", g.UserGetQuery>;
            list: types.SdkRequest<"userList", g.UserListQuery>;
        };
        fn: {
            create: types.SdkRequest<"functionCreate", g.FunctionCreateMutation>;
            get: types.SdkRequest<"functionGet", g.FunctionGetQuery>;
            global: types.SdkRequest<"functionGlobal", g.FunctionGlobalQuery>;
            subgraph: types.SdkRequest<"functionSubgraph", g.FunctionSubgraphQuery>;
        };
        smartContract: {
            get: types.SdkRequest<"smartContractGet", g.SmartContractGetQuery>;
            global: types.SdkRequest<"smartContractGlobal", g.SmartContractGlobalQuery>;
        };
        view: {
            create: types.SdkRequest<"viewCreate", g.ViewCreateMutation>;
            get: types.SdkRequest<"viewGet", g.ViewGetQuery>;
            global: types.SdkRequest<"viewGlobal", g.ViewGlobalQuery>;
            subgraph: types.SdkRequest<"viewSubgraph", g.ViewSubgraphQuery>;
            dryRun: types.SdkRequest<"viewDryRun", g.ViewDryRunMutation>;
        };
        data: types.SdkRequest<"data", g.DataQuery>;
        alias: {
            add: types.SdkRequest<"aliasAdd", g.AliasAddMutation>;
            remove: types.SdkRequest<"aliasRemove", g.AliasRemoveMutation>;
        };
    };
}
//# sourceMappingURL=client.d.ts.map