/* tslint:disable */
/* eslint-disable */
/**
* @returns {string}
*/
export function version(): string;
/**
* @param {any} identity
* @returns {string}
*/
export function new_ssk(identity: any): string;
/**
* @param {any} identity
* @returns {string}
*/
export function encode_ssk(identity: any): string;
/**
* @param {string} ssk_data
* @param {any} signature
* @returns {string}
*/
export function build_ssk(ssk_data: string, signature: any): string;
/**
* @param {string} js_ssk
* @returns {any}
*/
export function verify_ssk(js_ssk: string): any;
/**
* @param {string} sk
* @returns {string}
*/
export function get_pubkey_of(sk: string): string;
/**
* @param {string} sk
* @param {string} role
* @returns {any}
*/
export function new_apikey(sk: string, role: string): any;
/**
* @param {string} key
* @returns {string}
*/
export function pubkey_as_address(key: string): string;
/**
* @param {string} address
* @returns {string}
*/
export function address_as_pubkey(address: string): string;
/**
* @param {string} cert
* @returns {any}
*/
export function verify_cert(cert: string): any;
/**
* @param {string} owner
* @param {string} role
* @returns {any}
*/
export function new_cert(owner: string, role: string): any;
/**
* @param {string} secret
* @param {any} cert
* @param {any} signature
* @returns {any}
*/
export function build_apikey(secret: string, cert: any, signature: any): any;

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly version: () => number;
  readonly new_ssk: (a: number, b: number) => void;
  readonly encode_ssk: (a: number, b: number) => void;
  readonly build_ssk: (a: number, b: number, c: number, d: number) => void;
  readonly verify_ssk: (a: number, b: number, c: number) => void;
  readonly get_pubkey_of: (a: number, b: number, c: number) => void;
  readonly new_apikey: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly pubkey_as_address: (a: number, b: number, c: number) => void;
  readonly address_as_pubkey: (a: number, b: number, c: number) => void;
  readonly verify_cert: (a: number, b: number, c: number) => void;
  readonly new_cert: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly build_apikey: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly __wbindgen_export_0: (a: number) => number;
  readonly __wbindgen_export_1: (a: number, b: number, c: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_export_2: (a: number) => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
export function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
